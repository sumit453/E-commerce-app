{
  "openapi": "3.0.0",
  "info": {
    "version": "1.3.0",
    "description": "Complete API documentation for E-Commerce application with JWT authentication",
    "title": "ShopSphere API",
    "contact": {
      "name": "API Support",
      "email": "support@shopsphere.com"
    },
    "license": {
      "name": "MIT",
      "url": "https://opensource.org/licenses/MIT"
    }
  },
  "externalDocs": {
    "description": "Database Schema Reference",
    "url": "https://github.com/sumit453/e-commerce-app.git"
  },
  "servers": [
    {
      "url": "http://localhost:3200",
      "description": "Development server"
    },
    {
      "url": "https://api.shopsphere.com/v1",
      "description": "Production server"
    }
  ],
  "components": {
    "securitySchemes": {
      "JWT": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT",
        "description": "JWT Authorization header using the Bearer scheme. Example: 'Bearer {token}'"
      }
    },
    "schemas": {
      "User": {
        "type": "object",
        "required": ["name", "email", "password", "typeOfUser"],
        "properties": {
          "id": {
            "type": "string",
            "format": "objectid",
            "example": "507f1f77bcf86cd799439011"
          },
          "name": {
            "type": "string",
            "maxLength": 25,
            "example": "John Doe"
          },
          "email": {
            "type": "string",
            "format": "email",
            "example": "user@shopsphere.com"
          },
          "password": {
            "type": "string",
            "format": "password",
            "description": "8-12 characters with at least one special character",
            "example": "Secure@123"
          },
          "typeOfUser": {
            "type": "string",
            "enum": ["Customer", "Seller"],
            "example": "Customer"
          }
        }
      },
      "Product": {
        "type": "object",
        "required": [
          "name",
          "desc",
          "price",
          "instock",
          "imageUrl",
          "categories"
        ],
        "properties": {
          "id": {
            "type": "string",
            "format": "objectid",
            "example": "507f1f77bcf86cd799439012"
          },
          "name": {
            "type": "string",
            "example": "Wireless Headphones"
          },
          "desc": {
            "type": "string",
            "example": "Noise-cancelling wireless headphones with 30hr battery"
          },
          "price": {
            "type": "number",
            "format": "float",
            "minimum": 0,
            "example": 129.99
          },
          "instock": {
            "type": "integer",
            "example": 50
          },
          "imageUrl": {
            "type": "string",
            "example": "https://cdn.com/headphones.jpg"
          },
          "sizes": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": ["S", "M", "L"]
          },
          "categories": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "objectid"
            },
            "example": ["507f1f77bcf86cd799439013"]
          }
        }
      },
      "CartItem": {
        "type": "object",
        "properties": {
          "productId": {
            "type": "string",
            "format": "objectid",
            "example": "507f1f77bcf86cd799439012"
          },
          "quantity": {
            "type": "integer",
            "minimum": 1,
            "example": 2
          }
        }
      },
      "Cart": {
        "type": "object",
        "properties": {
          "userId": {
            "$ref": "#/components/schemas/User/properties/id"
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CartItem"
            }
          }
        }
      },
      "Like": {
        "type": "object",
        "properties": {
          "user": {
            "$ref": "#/components/schemas/User/properties/id"
          },
          "likeable": {
            "type": "string",
            "format": "objectid",
            "description": "ID of liked product or category"
          },
          "on_model": {
            "type": "string",
            "enum": ["Product", "Category"],
            "example": "Product"
          }
        }
      },
      "Review": {
        "type": "object",
        "properties": {
          "rating": {
            "type": "integer",
            "minimum": 1,
            "maximum": 5,
            "example": 4
          },
          "comment": {
            "type": "string",
            "example": "Great product quality!"
          }
        }
      },
      "Order": {
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CartItem"
            }
          },
          "totalAmount": {
            "type": "number",
            "example": 259.98
          },
          "status": {
            "type": "string",
            "enum": ["Pending", "Shipped", "Delivered"],
            "example": "Pending"
          }
        }
      },
      "AuthResponse": {
        "type": "object",
        "properties": {
          "token": {
            "type": "string",
            "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
          },
          "refreshToken": {
            "type": "string",
            "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
          },
          "user": {
            "$ref": "#/components/schemas/User"
          }
        }
      },
      "Error": {
        "type": "object",
        "properties": {
          "code": {
            "type": "integer",
            "example": 400
          },
          "message": {
            "type": "string",
            "example": "Validation error"
          },
          "details": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": ["Password must contain a special character"]
          }
        }
      }
    }
  },
  "paths": {
    "/api/users/signup": {
      "post": {
        "tags": ["Authentication"],
        "summary": "Register new user",
        "description": "Create a new customer or seller account",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["name", "email", "password", "typeOfUser"],
                "properties": {
                  "name": {
                    "$ref": "#/components/schemas/User/properties/name"
                  },
                  "email": {
                    "$ref": "#/components/schemas/User/properties/email"
                  },
                  "password": {
                    "$ref": "#/components/schemas/User/properties/password"
                  },
                  "typeOfUser": {
                    "$ref": "#/components/schemas/User/properties/typeOfUser"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "User created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthResponse"
                }
              }
            }
          },
          "400": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "409": {
            "description": "Email already registered"
          }
        }
      }
    },
    "/api/users/signin": {
      "post": {
        "tags": ["Authentication"],
        "summary": "Authenticate user",
        "description": "Login with email and password to receive JWT tokens",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["email", "password"],
                "properties": {
                  "email": {
                    "$ref": "#/components/schemas/User/properties/email"
                  },
                  "password": {
                    "$ref": "#/components/schemas/User/properties/password"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Authentication successful",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid credentials",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/users/resetPassword": {
      "put": {
        "tags": ["Authentication"],
        "summary": "Reset user password",
        "description": "Reset password for authenticated user",
        "security": [{ "JWT": [] }],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["newPassword"],
                "properties": {
                  "newPassword": {
                    "$ref": "#/components/schemas/User/properties/password"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Password updated successfully"
          },
          "400": {
            "description": "Invalid password format"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/products": {
      "get": {
        "tags": ["Products"],
        "summary": "Get all products",
        "description": "Retrieve all products (no pagination)",
        "security": [{ "JWT": [] }],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Product"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error"
          }
        }
      },
      "post": {
        "tags": ["Products"],
        "summary": "Add new product",
        "description": "Add a new product to the inventory (Seller only)",
        "security": [{ "JWT": [] }],
        "requestBody": {
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "required": ["name", "desc", "price", "instock", "categories"],
                "properties": {
                  "name": {
                    "type": "string"
                  },
                  "desc": {
                    "type": "string"
                  },
                  "price": {
                    "type": "number"
                  },
                  "instock": {
                    "type": "integer"
                  },
                  "sizes": {
                    "type": "string",
                    "description": "Comma-separated sizes (e.g., 'S,M,L')"
                  },
                  "categories": {
                    "type": "string",
                    "description": "Comma-separated category IDs"
                  },
                  "imageUrl": {
                    "type": "string",
                    "format": "binary",
                    "description": "Product image file"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Product created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Product"
                }
              }
            }
          },
          "400": {
            "description": "Invalid input"
          },
          "403": {
            "description": "Forbidden (seller access required)"
          }
        }
      }
    },
    "/api/products/filter": {
      "get": {
        "tags": ["Products"],
        "summary": "Filter products",
        "description": "Filter products by various criteria",
        "security": [{ "JWT": [] }],
        "parameters": [
          {
            "name": "minPrice",
            "in": "query",
            "description": "Minimum price",
            "schema": { "type": "number" }
          },
          {
            "name": "maxPrice",
            "in": "query",
            "description": "Maximum price",
            "schema": { "type": "number" }
          },
          {
            "name": "category",
            "in": "query",
            "description": "Category ID",
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "Filtered products",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Product"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/products/averagePrice": {
      "get": {
        "tags": ["Products"],
        "summary": "Get average product price",
        "description": "Calculate average price of all products",
        "security": [{ "JWT": [] }],
        "responses": {
          "200": {
            "description": "Average price",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "averagePrice": {
                      "type": "number",
                      "example": 89.99
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/products/rate": {
      "post": {
        "tags": ["Products"],
        "summary": "Rate a product",
        "description": "Add or update a product rating",
        "security": [{ "JWT": [] }],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["productId", "rating"],
                "properties": {
                  "productId": {
                    "type": "string",
                    "format": "objectid"
                  },
                  "rating": {
                    "type": "integer",
                    "minimum": 1,
                    "maximum": 5
                  },
                  "comment": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Rating submitted",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Review"
                }
              }
            }
          }
        }
      }
    },
    "/api/products/updatereview": {
      "patch": {
        "tags": ["Products"],
        "summary": "Update a review",
        "description": "Update existing product review",
        "security": [{ "JWT": [] }],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["reviewId", "rating"],
                "properties": {
                  "reviewId": {
                    "type": "string",
                    "format": "objectid"
                  },
                  "rating": {
                    "type": "integer",
                    "minimum": 1,
                    "maximum": 5
                  },
                  "comment": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Review updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Review"
                }
              }
            }
          }
        }
      }
    },
    "/api/products/deletereview": {
      "delete": {
        "tags": ["Products"],
        "summary": "Delete a review",
        "description": "Delete a product review",
        "security": [{ "JWT": [] }],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["reviewId"],
                "properties": {
                  "reviewId": {
                    "type": "string",
                    "format": "objectid"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "Review deleted"
          }
        }
      }
    },
    "/api/products/{id}/reviews": {
      "get": {
        "tags": ["Products"],
        "summary": "Get product reviews",
        "description": "Retrieve all reviews for a product",
        "security": [{ "JWT": [] }],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "objectid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Product reviews",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Review"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/products/{id}": {
      "get": {
        "tags": ["Products"],
        "summary": "Get product details",
        "security": [{ "JWT": [] }],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "objectid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Product details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Product"
                }
              }
            }
          },
          "404": {
            "description": "Product not found"
          }
        }
      },
      "delete": {
        "tags": ["Products"],
        "summary": "Delete a product",
        "description": "Delete product (Seller only)",
        "security": [{ "JWT": [] }],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "objectid"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Product deleted"
          },
          "403": {
            "description": "Forbidden (seller access required)"
          },
          "404": {
            "description": "Product not found"
          }
        }
      }
    },
    "/api/cart": {
      "get": {
        "tags": ["Cart"],
        "summary": "Get user's cart",
        "security": [{ "JWT": [] }],
        "responses": {
          "200": {
            "description": "Cart contents",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Cart"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["Cart"],
        "summary": "Add item to cart",
        "security": [{ "JWT": [] }],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CartItem"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Item added to cart",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Cart"
                }
              }
            }
          },
          "400": {
            "description": "Invalid product or quantity"
          }
        }
      }
    },
    "/api/cart/{id}": {
      "delete": {
        "tags": ["Cart"],
        "summary": "Remove item from cart",
        "security": [{ "JWT": [] }],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "objectid"
            },
            "description": "Cart item ID"
          }
        ],
        "responses": {
          "200": {
            "description": "Item removed from cart"
          },
          "404": {
            "description": "Item not found in cart"
          }
        }
      }
    },
    "/api/like": {
      "post": {
        "tags": ["Likes"],
        "summary": "Like an item",
        "security": [{ "JWT": [] }],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["likeable", "on_model"],
                "properties": {
                  "likeable": {
                    "type": "string",
                    "format": "objectid"
                  },
                  "on_model": {
                    "type": "string",
                    "enum": ["Product", "Category"]
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Item liked",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Like"
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": ["Likes"],
        "summary": "Get all likes",
        "security": [{ "JWT": [] }],
        "responses": {
          "200": {
            "description": "List of all likes",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Like"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/like/userlike": {
      "get": {
        "tags": ["Likes"],
        "summary": "Get user's likes",
        "description": "Retrieve likes for the authenticated user",
        "security": [{ "JWT": [] }],
        "responses": {
          "200": {
            "description": "User's likes",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Like"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/order": {
      "post": {
        "tags": ["Orders"],
        "summary": "Create new order",
        "description": "Create order from cart items",
        "security": [{ "JWT": [] }],
        "responses": {
          "201": {
            "description": "Order created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Order"
                }
              }
            }
          }
        }
      }
    }
  }
}
